@page "/"

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Your Page Title</title>
     
    <link rel="stylesheet" href="css/Index.css">
</head>
<body>
    <div>
        <PageTitle>Index</PageTitle>

        @if (_todos.Count != 0)
        {
            <h3>Total Remaining Tasks = @_todos.Count(todo => !todo.IsDone)</h3>
        }

        <ul>
            @{
                var sortedTodos = _todos.OrderBy(t => t.DeadLine).ThenByDescending(t => t.Priority);
                DateOnly lastEntry = DateOnly.MinValue;
            }

            @foreach (var todo in sortedTodos)
            {
                if (lastEntry == DateOnly.MinValue || todo.DeadLine != lastEntry)
                {
                    if (GetRemainingCount(todo.DeadLine) == 0)
                    {
                        <h4>DeadLine - @todo.DeadLine - Completed every entry</h4>
                    }
                    else
                    {
                        <h4>DeadLine - @todo.DeadLine (@(GetRemainingCount(todo.DeadLine)) items remaining)</h4>
                    }

                    lastEntry = todo.DeadLine;
                }

                <li>
                    <input type="checkbox" @bind="todo.IsDone" />
                    @if (todo.IsDone){
                        <span id="boxtext_strikeThrough">@todo.Title</span>
                        <span id="boxtext_strikeThrough">Priority: @todo.Priority</span>
                    } else  {
                        <span id="boxtext">@todo.Title</span>
                        <span id="boxtext">Priority: @todo.Priority</span>
                    }
                    <button @onclick="() => SelectEntry(todo)">View Description</button>
                    <button @onclick="() => DeleteEntry(todo)">Delete Entry</button>
                    <button @onclick="() => ShowEditEntry(todo)">Edit Entry</button>
                </li>
            }
        </ul>
    </div>
    <div id="new-entry-section">
        @if (_showDescription)
        {
            <br />
            <h3>Task - @_selectedItem.Title </h3>
            <p>@_selectedItem.Description</p>
            <button @onclick="ToggleDescription">Close Description</button>
            <button @onclick="() => ShowEditEntry(_selectedItem)">Edit Entry</button>
            <button @onclick="() => DeleteEntry(_selectedItem)">Delete Entry</button>
        }

        @if (_showCreateNewEntry)
        {
            <br />
            <h3>Create New Entry</h3>
            <br />
            <p>Title</p>
            <input @bind="_newTodoTitle" />
            <br />
            <p>Description</p>
            <input @bind="_newTodoDescription" />
            <br />
            <p>Date To Complete</p>
            <input type="date" @bind="_newTodoTime" />
            <br />
            <p>Priority (Higher = More important)</p>
            <input @bind="_priority" />
            <br />
            <button @onclick="AddTodo">Add Entry</button>
        }
        else if (_suppressTabs == false)
        {
            <button @onclick="ToggleCreateNewEntry">Create a new entry</button>
        }

        @if (_showEditEntry)
        {
            <br />
            <h3>Edit Entry</h3>
            <br />
            <p>Title</p>
            <input @bind="_newTodoTitle" />
            <br />
            <p>Description</p>
            <input @bind="_newTodoDescription" />
            <br />
            <p>Date To Complete</p>
            <input type="date" @bind="_newTodoTime" />
            <br />
            <p>Priority (Higher = More important)</p>
            <input @bind="_priority" />
            <br />
            <button @onclick="ConfirmedEditEntry">Confirm edit</button>
        }
    </div>

    @code {
        private bool _showCreateNewEntry = false;
        private bool _showEditEntry = false;
        private bool _showDescription = false;
        private bool _suppressTabs = false;

        private ToDoItem _selectedItem = null;
        private List<ToDoItem> _todos = new();

        private string _newTodoTitle = "";
        private string _newTodoDescription = "";
        private DateOnly _newTodoTime = DateOnly.FromDateTime(DateTime.Now.Date);
        private int _priority = 1;

        void AddTodo()
        {
            if (!string.IsNullOrWhiteSpace(_newTodoTitle))
            {
                _todos.Add(new ToDoItem { Title = _newTodoTitle, Description = _newTodoDescription, DeadLine = _newTodoTime, Priority = _priority });
                _newTodoTitle = string.Empty;
                _newTodoDescription = string.Empty;
                _newTodoTime = DateOnly.FromDateTime(DateTime.Now.Date);
                _priority = 1;
                HideAllTabs();
                _suppressTabs = false;
            }
        }

        void HideAllTabs()
        {
            _showCreateNewEntry = false;
            _showDescription = false;
            _showEditEntry = false;
            _suppressTabs = true;
        }

        void ToggleCreateNewEntry()
        {
            HideAllTabs();
            _newTodoTitle = string.Empty;
            _newTodoDescription = string.Empty;
            _newTodoTime = DateOnly.FromDateTime(DateTime.Now.Date);
            _priority = 1;

            _showCreateNewEntry = true;
        }

        void ToggleDescription()
        {
            HideAllTabs();
        }

        void SelectEntry(ToDoItem item)
        {
            _selectedItem = item;
            ToggleDescription();
            _showDescription = true;
        }

        void DeleteEntry(ToDoItem item)
        {
            _todos.Remove(item);

            if (_showDescription)
            {
                _suppressTabs = false;
            }

            _showDescription = false;
        }

        void ShowEditEntry(ToDoItem item)
        {
            HideAllTabs();
            _showEditEntry = true;
            _selectedItem = item;
            _newTodoTitle = item.Title;
            _newTodoDescription = item.Description;
            _newTodoTime = item.DeadLine;
            _priority = item.Priority;
        }

        void ConfirmedEditEntry()
        {
            _selectedItem.Title = _newTodoTitle;
            _selectedItem.Description = _newTodoDescription;
            _selectedItem.DeadLine = _newTodoTime;
            _selectedItem.Priority = _priority;
            HideAllTabs();
            _suppressTabs = false;
        }

        int GetRemainingCount(DateOnly deadline)
        {
            return _todos.Count(t => t.DeadLine == deadline && !t.IsDone);
        }

        protected override void OnInitialized()
        {
            Random random = new Random();

            for (int i = 1; i <= 6; i++)
            {
                string randomChore = GetRandomChore();
                _todos.Add(new ToDoItem
                {
                    Title = $"{randomChore}",
                    Description = $"{randomChore}",
                    DeadLine = DateOnly.FromDateTime(DateTime.Now.Date.AddDays(random.Next(1, 4))),
                    Priority = random.Next(1, 5)
                });
            }
        }

        private List<string> usedChores = new List<string>(); 

        private string GetRandomChore()
        {
            string[] householdChores = {
                "Vacuuming",
                "Dusting",
                "Mopping",
                "Doing the dishes",
                "Taking out the trash",
                "Laundry",
                "Cleaning the bathroom",
                "Making the bed",
                "Organizing the pantry",
                "Washing windows",
                "Sweeping the floors",
                "Watering plants",
                "Cleaning the refrigerator",
                "Changing bed sheets",
                "Cleaning the oven",
                "Wiping countertops",
                "Dusting blinds",
                "Cleaning mirrors",
                "Scrubbing the toilet"
                };

            Random random = new Random();

            var availableChores = householdChores.Except(usedChores).ToArray();

            if (availableChores.Length == 0)
            {
                usedChores.Clear();
                availableChores = householdChores;
            }

            int index = random.Next(availableChores.Length);
            string selectedChore = availableChores[index];

            usedChores.Add(selectedChore);
            return selectedChore;
        }


    }
</body>
</html>